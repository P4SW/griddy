options {
    OUTPUT_DIRECTORY = "src/com/company";
    MULTI = true;
    NODE_PACKAGE = "com.company.parser";
    JJTREE_OUTPUT_DIRECTORY = "src/com/company/parser";
    VISITOR = true;
    LOOKAHEAD = 1;
    NODE_DEFAULT_VOID = true;
    JDK_VERSION = "17.0";
}

PARSER_BEGIN(Griddy)
package com.company;

import java.util.ArrayList;
import java.io.InputStream;import java.util.HashMap;
import com.company.target.*;
import com.company.parser.GriddyVisitor;

public class Griddy {
    Target target = Target.C;
    public static void main(Target target, boolean tree, InputStream input, StringBuilder output) {
        Griddy parser = new Griddy(input);

        try {
            ASTStart n = parser.Start();
            if (tree) n.dump("");
            else {
                GriddyVisitor v;
                switch(target){
                    case JS : v = new JSVisitor(); break;
                    default : v = new CVisitor(); break;
                }
                n.accept(v, output);
            }
        } catch (Exception e) {
            System.out.println("An error occurred.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Griddy)

/* Whitespace characters */
SKIP : {
        < WHITE_SPACE:  <TAB> | <NEWLINE> | <SP>    >
    |   < #SP:   " "     >
    |   < #TAB:  "\t"    >
}

/* Comments */
SPECIAL_TOKEN : {
        <SINGLE_LINE_COMMENT:   "#" (~["\n","\r"])* <NEWLINE>   >
    |   < NEWLINE:  "\n" | "\r" | "\r\n"    >   // line endings
}

/* Reserved keywords */
TOKEN : {
        < IF:   "if"    >   // if statement
    |   < ELSE: "else"  >   // else statement
    |   < FROM: "from"  >   // get value 'from' board, e.g. '(x,y) from my_board'
    |   < ON:   "on"    >   // value exist on board, e.g. 'game_piece on my_board'
    |   < AT:   "at"    >
    |   < IN:   "in"    >   // e.g. 'for x in iterable'
    |   < FOR:  "for"   >   // for loop begin
    |   < END:  "end"   >   // block end
    |   < OUTPUT: "output"  >   // prints the output
    |   < GAME_SETUP:   "SETUP" >   // setup phase begin
    |   < GAME_MAIN:    "GAME"  >   // game phase begin
    |   < FUNC_DECL:    "fun"   >   // function declaration
    |   < BOARD_DECL:   "board" >   // board declaration token, e.g. 'board (n,m)'
    |   < PIECE_DECL:   "piece" >   // game piece declaration token, e.g. 'piece { ...props }'
    |   < GET:  "get"   >
    |   < PLACE: "place"    >   // place pieces on a board
    |   < NULL: "empty" >
}

/* Punctuators */
TOKEN : {
        < EQ:   "=="    >   // equal
    |   < NEQ:  "!="    >   // 'not equal'
    |   < GEQ:  ">="    >   // 'greater than or equal to'
    |   < LEQ:  "<="    >   // 'less than or equal to'
    |   < NOT:  "!"     >   // 'not' / 'negate'
    |   < LT:   "<"     >   // 'less than'
    |   < GT:   ">"     >   // 'greater than'
    |   < AND:  "&&"    >   // logical 'and'
    |   < OR:   "||"    >   // logical 'or'
    |   < PLUS: "+"     >   // addition
    |   < MINUS:"-"     >   // subtraction
    |   < MULT: "*"     >   // multiplication
    |   < DIV:  "/"     >   // division
    |   < MOD:  "%"     >   // modulus
    |   < INCR:  "++"   >   // increment
    |   < DECR:  "--"   >   // decrement
    |   < ASSIGN: "="   >   // variable assigment
    |   < PLUS_ASSIGN:  "+="    >   // add and assign
    |   < MINUS_ASSIGN: "-="    >   // subtract and assign
    |   < MULT_ASSIGN:  "*="    >   // multiply and assign
    |   < DIV_ASSIGN:   "/="    >   // divide and assign
    |   < DOT:      "." >   // dot (struct property access maybe?)
    |   < COMMA:    "," >   // seperator comma
    |   < SEMICOLON: ";">   // statement endings
    |   < COLON:    ":" >   // property assignment
    |   < LPAREN:   "(" >   // left parenthesis
    |   < RPAREN:   ")" >   // right parenthesis
    |   < LBRACE:   "{" >   // left curly bracket
    |   < RBRACE:   "}" >   // right curly bracket
    |   < LBRACKET: "[" >   // left square bracket
    |   < RBRACKET: "]" >   // right square bracket
}

/* Literals (terminals) */
TOKEN : {
        < NUM:  ["0"-"9"] | ["1"-"9"] (["0"-"9"])+  >
    |   < BOOL: "true" | "false"    >
    |   < NEG_NUM:  "-" <NUM>   >
    |   < STRING:  "\"" (~["\"","\r","\n"])* "\"" > // string literal
}

/* Identifier (terminals) */
TOKEN : {
        < IDENT:        <IDENT_PART> (<IDENT_PART>)* >
    |   < #IDENT_PART:  (<LETTER> | "_")+ >
    |   < #LETTER:      ["a"-"z","A"-"Z"] >
}

ASTStart Start() #Start : {}
{
    setupPhase()
    gamePhase()
    <EOF>
    { return jjtThis; }
}

void setupPhase() : {}
{
    <GAME_SETUP>
    (setupStmt())*
}

void setupStmt() : {}
{
        assignment() <SEMICOLON>
}

void gamePhase() #Game : {}
{
    <GAME_MAIN>
    (gameStmt())+
}

void gameStmt() : {}
{
        assignment() <SEMICOLON>
    |   outputStmt() <SEMICOLON>
    |   placeStmt() <SEMICOLON>
}

void placeStmt() #Place : {}
{
    <PLACE> identifier() <ON> identifier() <AT> position()
}

void position() #Position : { }
{
    <LPAREN> number() <COMMA> number() <RPAREN>
}

void boardDeclaration() #Board :
{
    Token a, b;
    ArrayList<Integer> boardSize = new ArrayList<Integer>();
}
{
    <BOARD_DECL> <LPAREN> a=<NUM> <COMMA> b=<NUM> <RPAREN>
    {
    boardSize.add(Integer.parseInt(a.image));
    boardSize.add(Integer.parseInt(b.image));
    jjtThis.setValue(boardSize);
}
}

void boardAccess() #Access  : { }
{
     position() <ON> identifier()
}

void pieceDeclaration() #Piece :
{
    HashMap<Node, Node> props = new HashMap<Node, Node>();
}
{
    <PIECE_DECL>
    (
        { Node k, v; }
        k=identifier() <COLON> (v=number() | v=stringLiteral())
        {
            props.put(k, v);
            jjtThis.setValue(props);
        }
    )+
    <END>
}

void assignment() #Assign : {}
{
    identifier() <ASSIGN>
    (   LOOKAHEAD( boardAccess() )
        boardAccess()
    |   expression()
    |   boardDeclaration()
    |   pieceDeclaration()
    |   stringLiteral()
    |   empty()
    )
}

ASTEmpty empty() #Empty :
{
    Token t;
}
{
    <NULL> t=<IDENT>
    {
        jjtThis.setValue(t.image);
        return jjtThis;
    }
}

void expression() #Expr(>1) : {}
{
    multiplicativeExpr() [ ( additiveOperator() | booleanOperator() ) multiplicativeExpr() ]
}

ASTOperator additiveOperator() #Operator :
{
    Token t;
}
{
    ( t=<PLUS> | t=<MINUS> )
    {
        jjtThis.setValue(t.image);
        return jjtThis;
    }
}

void multiplicativeExpr() #Expr(>1) : {}
{
    unary() [ multiplicativeOperator() unary() ]
}

ASTOperator multiplicativeOperator() #Operator :
{
    Token t;
}
{
    (t=<MULT> | t=<DIV> | t=<MOD>)
    {
        jjtThis.setValue(t.image);
        return jjtThis;
    }
}

void unary() : {}
{
        <LPAREN> expression() <RPAREN>
    |   primary()
}

void primary() : {}
{
        number()
    |   bool()
    |   identifier()
}

ASTOperator booleanOperator() #Operator :
{
    Token t;
}
{
    (  t=<EQ>
    |  t=<NEQ>
    |  t=<LEQ>
    |  t=<GEQ>
    |  t=<LT>
    |  t=<GT>
    |  t=<OR>
    )
    {
        jjtThis.setValue(t.image);
        return jjtThis;
    }
}

ASTIdent identifier() #Ident :
{
    Token t;
}
{
    t=<IDENT>
    {
        jjtThis.setValue(t.image);
        return jjtThis;
    }
}

ASTInteger number() #Integer :
{
    Token t;
}
{
    t=<NUM>
    {
        jjtThis.setValue(Integer.parseInt(t.image));
        return jjtThis;
    }
}

void bool() #Boolean :
{
    Token t;
}
{
    t=<BOOL>
    { jjtThis.setValue(t.image); }
}

ASTString stringLiteral() #String :
{
    Token t;
}
{
    t=<STRING>
    {
        jjtThis.setValue(t.image.substring(1, (t.image.length() - 1)));
        return jjtThis;
    }
}

void outputStmt() #Output : {}
{
    <OUTPUT> ( expression() | stringLiteral() )
}
