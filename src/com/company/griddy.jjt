options {
    OUTPUT_DIRECTORY = "src/com/company";
    MULTI = true;
    NODE_PACKAGE = "com.company.parser";
    JJTREE_OUTPUT_DIRECTORY = "src/com/company/parser";
    VISITOR = true;
}

PARSER_BEGIN(Griddy)
package com.company;

import java.util.ArrayList;

public class Griddy {

    public static void main(String args[]) {
        Griddy parser = new Griddy(System.in);

        try {
            ASTStart n = parser.Start();
            n.dump("");
        } catch (Exception e) {
            System.out.println("An error occurred.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Griddy)

/* Whitespace characters */
SKIP : {
        < WHITE_SPACE:  <TAB> | <NEWLINE> | <SP>    >
    |   < #SP:   " "     >
    |   < #TAB:  "\t"    >
    |   < NEWLINE:  "\n" | "\r" | "\r\n"    >   // line endings
}

/* Comments */
SPECIAL_TOKEN : {
        <SINGLE_LINE_COMMENT:   "#" (~["\n","\r"])* <NEWLINE>   >
}

/* Reserved keywords */
TOKEN : {
        < IF:   "if"    >   // if statement
    |   < ELSE: "else"  >   // else statement
    |   < FROM: "from"  >   // get value 'from' board, e.g. '(x,y) from my_board'
    |   < ON:   "on"    >   // value exist on board, e.g. 'game_piece on my_board'
    |   < IN:   "in"    >   // e.g. 'for x in iterable'
    |   < FOR:  "for"   >   // for loop begin
    |   < WHILE:"while" >   // while loop begin
    |   < GAME_SETUP:   "SETUP" >   // setup phase begin
    |   < GAME_MAIN:    "GAME"  >   // game phase begin
    |   < FUNC_DECL:    "fun"   >   // function declaration
    |   < BOARD_DECL:   "board" >   // board declaration token, e.g. 'board (n,m)'
}

/* Punctuators */
<DEFAULT, IN_REGEX>
TOKEN : {
        < EQ:   "=="    > : DEFAULT // equal
    |   < NEQ:  "!="    > : DEFAULT // 'not equal'
    |   < GEQ:  ">="    > : DEFAULT // 'greater than or equal to'
    |   < LEQ:  "<="    > : DEFAULT // 'less than or equal to'
    |   < NOT:  "!"     > : DEFAULT // 'not' / 'negate'
    |   < LT:   "<"     > : DEFAULT // 'less than'
    |   < GT:   ">"     > : DEFAULT // 'greater than'
    |   < AND:  "&&"    > : DEFAULT // logical 'and'
    |   < OR:   "||"    > : DEFAULT // logical 'or'
    |   < PLUS: "+"     > : DEFAULT // addition
    |   < MINUS:"-"     > : DEFAULT // subtraction
    |   < MULT: "*"     > : DEFAULT // multiplication
    |   < DIV:  "/"     > : DEFAULT // division
    |   < MOD:  "%"     > : DEFAULT // modulus
    |   < INCR:  "++"   > : DEFAULT // increment
    |   < DECR:  "--"   > : DEFAULT // decrement
    |   < ASSIGN: "="   > : DEFAULT // variable assigment
    |   < PLUS_ASSIGN:  "+="    > : DEFAULT // add and assign
    |   < MINUS_ASSIGN: "-="    > : DEFAULT // subtract and assign
    |   < MULT_ASSIGN:  "*="    > : DEFAULT // multiply and assign
    |   < DIV_ASSIGN:   "/="    > : DEFAULT // divide and assign
    |   < DOT:      "." > : DEFAULT     // dot (struct property access maybe?)
    |   < COMMA:    "," > : DEFAULT     // separator comma
    |   < SEMICOLON: ";"> : DEFAULT     // statement endings
    |   < LPAREN:   "(" > : DEFAULT     // left parenthesis
    |   < RPAREN:   ")" > : IN_REGEX    // right parenthesis
    |   < LBRACE:   "{" > : DEFAULT     // left curly bracket
    |   < RBRACE:   "}" > : IN_REGEX    // right curly bracket
    |   < LBRACKET: "[" > : DEFAULT     // left square bracket
    |   < RBRACKET: "]" > : IN_REGEX    // right square bracket
}

/* Literals */
<DEFAULT, IN_REGEX>
TOKEN : {
        < BOOL: "true" | "false"    > : IN_REGEX
    |   < NULL: "empty" > : DEFAULT
    |   < NUM:  ["0"-"9"] | ["1"-"9"] (["0"-"9"])*  > : DEFAULT
    |   < NEG_NUM:  "-" <NUM>   > : DEFAULT
}

/* Identifier */
TOKEN : {
        < IDENT:        <IDENT_PART> | <IDENT_PART> (<IDENT_PART>)* >
    |   < #IDENT_PART:  (<LETTER> | "_")+ >
    |   < #LETTER:      ["a"-"z","A"-"Z"] >
}

// TODO: Define string grammar.

ASTStart Start() : {}
{
    setupPhase()
    gamePhase()
    <EOF>
    { return jjtThis; }
}

void setupPhase() #Setup : {}
{
    <GAME_SETUP>
    (setupStmt())*
}

void setupStmt() #void : {}
{
    assignment()
}

void gamePhase() #Game : {}
{
    <GAME_MAIN>
    // TODO: Define game phase grammar.
    (expression() <SEMICOLON>)*
}

void boardDeclaration() #Board :
{
    Token a, b;
    ArrayList<Integer> boardSize = new ArrayList<Integer>();
}
{
    <BOARD_DECL> <LPAREN> a=<NUM> <COMMA> b=<NUM> <RPAREN>
    {
        boardSize.add(Integer.parseInt(a.image));
        boardSize.add(Integer.parseInt(b.image));
        jjtThis.jjtSetValue(boardSize);
    }
}

void assignment() #Assign : {}
{
    identifier() <ASSIGN> (boardDeclaration() | expression()) <SEMICOLON>
}

void identifier() #Ident : {
    Token t;
}
{
    t=<IDENT>
    { jjtThis.jjtSetValue(t.image); }
}

void expression() #Expr : {}
{
    additiveExpression()
}

void additiveExpression() #void : {}
{
    (
        multiplicativeExpression() ((<PLUS> | <MINUS>) multiplicativeExpression() )*
    ) #Add(>1)
}

void multiplicativeExpression() #void : {}
{
    (
        unary() ((<MULT> | <DIV> | <MOD>) unary())*
    ) #Mult(>1)
}

void unary() #void : {}
{
    <LPAREN> expression() <RPAREN> | <IDENT> | number()
}

ASTInteger number() #Integer :
{
    Token t;
}
{
    t=<NUM>
    {
        jjtThis.setValue(Integer.parseInt(t.image));
        return jjtThis;
    }
}